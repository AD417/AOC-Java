; a - debug flag
; b - some sort of lower bound?
; c - some sort of upper bound?
; d - iterator variable
; e - iterator variable
; f - some flag?
; g - a variable that should equal 0. Main comparison register.
; h - counter, the number of times f equals 0.


 1 - set b 84       ; b = 84
 2 - set c b        ; c = 84

 3 - jnz a 2        ; If not debug, jump to main program, else increase things.
 4 - jnz 1 5        ;

    ; Skipped in debug.
 5 - mul b 100      ; Multiply b by 100...
 6 - sub b -100000  ; and add 100,000.
 7 - set c b        ; c = b
 8 - sub c -17000   ; c += 17000

 9 - set f 1        ; f = false

10 - set d 2        ; d = 2
11 - set e 2        ; e = 2

12 - set g d        ;
13 - mul g e        ; if (d * e) - b == 0:
14 - sub g b        ;   f = true
15 - jnz g 2        ;
16 - set f 0        ; Usually skipped...

17 - sub e -1       ; e++; begins at 2.
18 - set g e        ;
19 - sub g b        ; if e != b (which it will be, unless B goes down a lot), jump to 12.
20 - jnz g -8       ;

21 - sub d -1       ; d++
22 - set g d        ;
23 - sub g b        ; if (d != b) goto line 11
24 - jnz g -13      ;

25 - jnz f 2        ; if f == 0, h++
26 - sub h -1       ; Literally just a counter for something.

27 - set g b
28 - sub g c        ; if b == c
29 - jnz g 2        ; continue running -- the solution has yet to be found?

30 - jnz 1 3        ; program ends if it gets here.
31 - sub b -17      ; increase b by 17...?
32 - jnz 1 -23      ; jump to line 9.

-----------------------------------------

Rewritten version:
int b = 84;
int c = 84;
int h = 0;

if (!DEBUG) {                // runs?
    b = b * 100 + 100_000;  // b = 184_000
    c = b + 17_000;         // c = 201_000
}

while (b != c) {
    boolean f = false;
    int d = 2;
    while (d < b) {
        int e = 2;
        while (e < b) {
            if (d * e == b) {
                f = true;
            }
            e++;
        }
        d++;
    }

    if (f == true) {
        h++;
    }
    b += 17;
}

-----------------------------------------

// Rewritten take 2:

int initialLow = 84;
int initialHigh = 84;
int counter = 0;

if (!DEBUG) {
    initialLow = initialLow * 100 + 100_000;
    initialHigh = initialLow + 17_000;
}

for (int number = initialLow; number < initialHigh; number += 17) {
    boolean isComposite = true;
    for (int factor1 = 2; factor1 < number; factor1++) {
        for (int factor2 = 2; factor2 < number; factor2++) {
            if (factor1 * factor2 == number) {
                isComposite = true;
            }
        }
    }

    if (isComposite) {
        counter++;
    }
}
// return counter;